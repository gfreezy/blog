<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on allsunday</title>
    <link>http://blog.allsunday.io/posts/</link>
    <description>Recent content in Posts on allsunday</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 18 Dec 2020 18:44:21 +0800</lastBuildDate>
    
	<atom:link href="http://blog.allsunday.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API 返回图片格式</title>
      <link>http://blog.allsunday.io/posts/2020-12-18-api-%E8%BF%94%E5%9B%9E%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 18 Dec 2020 18:44:21 +0800</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2020-12-18-api-%E8%BF%94%E5%9B%9E%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/</guid>
      <description>简单的实现 我们在给客户端返回图片的时候，一般都是直接返回图片 URL。 比如下方微博的一个 接口： 直接使用了 profile_image_url 字段返回了用户头像。 public_timeline.json [ { &#34;created_at&#34; : &#34;Tue Nov 30</description>
    </item>
    
    <item>
      <title>使用hugo&#43;asciidoctor在GitHub搭建博客</title>
      <link>http://blog.allsunday.io/posts/2020-04-11-%E4%BD%BF%E7%94%A8hugo&#43;asciidoctor%E5%9C%A8github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 11 Apr 2020 18:32:51 +0800</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2020-04-11-%E4%BD%BF%E7%94%A8hugo&#43;asciidoctor%E5%9C%A8github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>为什么要使用 hugo + asciidoctor 这样的组合 hugo 对自己的介绍是 The world’s fastest framework for building websites。 GitHub 有非常多的项目主页和个人博客都是用 hugo 生成的。hugo</description>
    </item>
    
    <item>
      <title>Python 多继承下 metaclass 优先级</title>
      <link>http://blog.allsunday.io/posts/2014-11-09-python-mutiple-metaclass/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2014-11-09-python-mutiple-metaclass/</guid>
      <description>在 Python 里面，class 也是一个对象，它是 type 实例化后生成的对象。 我们一般用如下的代码来定义一个类。 class ClassA(object): def method1(self): pass @classmethod def method2(cls): pass 实际上 class 这个关键字是类似语法</description>
    </item>
    
    <item>
      <title>IPTABLES INPUT 和 PREROUTING 的区别</title>
      <link>http://blog.allsunday.io/posts/2014-05-27-iptables-input%E5%92%8Cprerouting%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2014-05-27-iptables-input%E5%92%8Cprerouting%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>之前一直以为 iptables 的 input 链是用来判断是否允许 ip 包进入（不管这个 ip 包的目标地址是不是本机）， prerouting 链是用来做 ip 包转发的。 我们之前的架构是网管机器 maize 通过 iptables</description>
    </item>
    
    <item>
      <title>Linux 磁盘性能测试工具</title>
      <link>http://blog.allsunday.io/posts/2014-05-27-linux%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2014-05-27-linux%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description>公司的 MySQL io性能遇到了瓶颈， MySQL 层面的优化基本已经都做完了， 而应用层面的优化又会过于繁琐与复杂。 于是我们最初的结论是最简单的方法就是上 SSD。</description>
    </item>
    
    <item>
      <title>moosefs 新部署 chunkserver</title>
      <link>http://blog.allsunday.io/posts/2014-05-12-moosefs%E6%96%B0%E9%83%A8%E7%BD%B2chunkserver/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2014-05-12-moosefs%E6%96%B0%E9%83%A8%E7%BD%B2chunkserver/</guid>
      <description>在 /etc/apt/source.lst 里面加入 deb http://apt-repo:3143/ / 运行一下命令来安装 moosefs 相关的包 apt-get update apt-get install moosefs-chunkserver moosefs-client moosefs-master 修改配置文件 cd /etc/mfs cp mfschunkserver.cfg.dist mfschunkserver.cfg 因为我在 DNS 里面配置了 mfsmaster 指向 master 的 ip ，所以我们 不需要对 mfschunkserver 的配置</description>
    </item>
    
    <item>
      <title>MySQL 性能问题排查</title>
      <link>http://blog.allsunday.io/posts/2014-04-17-mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2014-04-17-mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>一月份上线了一个新的APP版本后导致MySQL的性能急剧下降。机器的io近几天基本一直都是 100% 状态，于是开始调MySQL的性能。 慢日志 首先查看</description>
    </item>
    
    <item>
      <title>mako根据条件判断是否使用页面缓存</title>
      <link>http://blog.allsunday.io/posts/2014-02-19-cache-pages-for-anonymous-users-in-mako/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2014-02-19-cache-pages-for-anonymous-users-in-mako/</guid>
      <description>最近遇到网站速度慢的情况，排查许久没查出什么原因。于是想着匿名用户的访问量占据了一半多，如果这一部分的请求全部缓存下来，那么应该能够很大程度</description>
    </item>
    
    <item>
      <title>制作 Moosefs debian 安装包</title>
      <link>http://blog.allsunday.io/posts/2013-07-17-%E5%88%B6%E4%BD%9Cmoosefs-debian%E5%AE%89%E8%A3%85%E5%8C%85/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2013-07-17-%E5%88%B6%E4%BD%9Cmoosefs-debian%E5%AE%89%E8%A3%85%E5%8C%85/</guid>
      <description>Moosefs一共可以分为 master, chunkserver, client 三个应用程序，需要分别制作3个debian安装包。 准备工作 确保 fuse 已经安装 安装 checkinstall apt-get install checkinstall 从 moosefs 下载源代码 mfs-1</description>
    </item>
    
    <item>
      <title>MySQL replica</title>
      <link>http://blog.allsunday.io/posts/2012-10-23-mysql-replica/</link>
      <pubDate>Fri, 30 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-10-23-mysql-replica/</guid>
      <description>&lt;p&gt;昨天终于把拖了很久的MySQL replica给做了。一共有两台服务器，一台是MySQL master，hostname是fig，还有一台是即将作为slave的，hostname为pistachio。两台机器装有相同版本的MySQL。&lt;/p&gt;
&lt;h2 id=&#34;基本步骤&#34;&gt;基本步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开启master fig的 &lt;em&gt;binary log&lt;/em&gt; ，修改 &lt;em&gt;my.cnf&lt;/em&gt; ，增加如下的配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; [mysqld]
 log-bin=mysql-bin
 server-id=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在master上面为replica新建一个账号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; mysql&amp;gt; CREATE USER &#39;repl&#39;@&#39;%.mydomain.com&#39; IDENTIFIED BY &#39;slavepass&#39;;
 mysql&amp;gt; GRANT REPLICATION SLAVE ON *.* TO &#39;repl&#39;@&#39;%.mydomain.com&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>apt-get 回滚 testing 到某一天的状态</title>
      <link>http://blog.allsunday.io/posts/2012-10-17-apt-get%E5%9B%9E%E6%BB%9Atesting%E5%88%B0%E6%9F%90%E4%B8%80%E5%A4%A9%E7%9A%84%E7%8A%B6%E6%80%81/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-10-17-apt-get%E5%9B%9E%E6%BB%9Atesting%E5%88%B0%E6%9F%90%E4%B8%80%E5%A4%A9%E7%9A%84%E7%8A%B6%E6%80%81/</guid>
      <description>&lt;p&gt;公司的服务器用的是Debian的testing版本，上面的MySQL是在3月份装的，是5.1的版本。因为最近要给MySQL加一个cluster，所以需要在新的虚拟机C上安装MySQL环境。&lt;/p&gt;
&lt;p&gt;服务器某台A虚拟机安装了apt-cache-ng，所有其余的机器的apt源都指向这台机器。由于我的手欠，在A上面执行了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导致testing库更新到了最新的代码。&lt;/p&gt;
&lt;p&gt;然后，纠结的地方到了，apt-get安装到的MySQL是5.5版本。我能做的只有两个方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把生产环境中5.1的MySQL升级&lt;/li&gt;
&lt;li&gt;想办法安装5.1版本的MySQL&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>nginx location and proxy_pass</title>
      <link>http://blog.allsunday.io/posts/2012-09-12-nginx-location-and-proxy-pass/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-09-12-nginx-location-and-proxy-pass/</guid>
      <description>&lt;p&gt;&lt;em&gt;Nginx&lt;/em&gt;的&lt;em&gt;location&lt;/em&gt;的格式为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location [=|~|~*|^~] uri { … }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;表示完全匹配&lt;em&gt;uri&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^~&lt;/code&gt;表示以&lt;em&gt;uri&lt;/em&gt;打头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;表示正则匹配&lt;em&gt;uri&lt;/em&gt;，且不区分大小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~*&lt;/code&gt;表示正则匹配&lt;em&gt;uri&lt;/em&gt;，但是区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Nginx&lt;/em&gt;匹配&lt;em&gt;location&lt;/em&gt;时，有一定的优先级，&lt;code&gt;=&lt;/code&gt;优先级最高，其次&lt;code&gt;^~&lt;/code&gt;，最后是&lt;code&gt;~&lt;/code&gt;和&lt;code&gt;~*&lt;/code&gt;。同一类型的匹配按照出现的先后顺序匹配。&lt;/p&gt;
&lt;p&gt;下面是一个例子，来自&lt;a href=&#34;http://wiki.nginx.org/HttpCoreModule#location&#34;&gt;http://wiki.nginx.org/HttpCoreModule#location&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location  = / {
    # matches the query / only.
    [ configuration A ]
}
location  / {
    # matches any query, since all queries begin with /, but regular
    # expressions and any longer conventional blocks will be
    # matched first.
    [ configuration B ]
}
location ^~ /images/ {
    # matches any query beginning with /images/ and halts searching,
    # so regular expressions will not be checked.
    [ configuration C ]
}
location ~* \.(gif|jpg|jpeg)$ {
    # matches any request ending in gif, jpg, or jpeg. However, all
    # requests to the /images/ directory will be handled by
    # Configuration C.
    [ configuration D ]
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>scrapy could not parse some html page correctly</title>
      <link>http://blog.allsunday.io/posts/2012-09-06-scrapy-could-not-parse-some-html-page-correctly/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-09-06-scrapy-could-not-parse-some-html-page-correctly/</guid>
      <description>在用Scrapy爬取淘宝的搜索结果时，发现很多的页面通过XPathSelector转换后丢失了很多的数据，只留下了一小部分的页面。 起初是以为</description>
    </item>
    
    <item>
      <title>pyramid1.3使用mako模板</title>
      <link>http://blog.allsunday.io/posts/2012-03-28-pyramid1-dot-3shi-yong-makomo-ban/</link>
      <pubDate>Wed, 28 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-03-28-pyramid1-dot-3shi-yong-makomo-ban/</guid>
      <description>Pyramid的pt模板文件可以使用相对路径来查找，如下 @view_config(route_name=&#39;home&#39;, renderer=templates/mytemplate.pt&#39;) 但是Pyramid的Mako模板不支持用相对路径，你必须使用绝对路径 @view_config(route_name=&#39;home&#39;, renderer=&#39;translatform:templates/mytemplate.mako&#39;) 或者，可</description>
    </item>
    
    <item>
      <title>实习报告</title>
      <link>http://blog.allsunday.io/posts/2012-03-24-shi-xi-bao-gao/</link>
      <pubDate>Sat, 24 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-03-24-shi-xi-bao-gao/</guid>
      <description>&lt;p&gt;2011年5月，此时我大学生活的第三个年头已经走向结束，无忧无虑的时光已经
基本上过完。走出学校，走入社会的事实已经近在眼前了。为了能够让自己增长
社会实践的经历，减少与社会需求的脱节，脱离象牙塔，我开始考虑实习的问题。
这个时候来学校招实习生的公司并不多，我有幸参加了淘宝的电话面试，可惜没
有通过。不过也正因为这样，我才能够来到现在的公司”下厨房“。我开始接触”
下厨房“是从一个技术社区开始的，我在上面看到了实习招聘，正好我也在找实
习，所以我完全没有多想，就把简历发了过去。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从Emacs中直接操作Octopress</title>
      <link>http://blog.allsunday.io/posts/2012-01-12-cong-emacszhong-zhi-jie-cao-zuo-octopress/</link>
      <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2012-01-12-cong-emacszhong-zhi-jie-cao-zuo-octopress/</guid>
      <description>前段时间换上了Octopress，也把博客迁到了Github上， 但是发文章变的好麻烦，又要rake new_post[title]，又要打开编</description>
    </item>
    
    <item>
      <title>emacs支持中文输入</title>
      <link>http://blog.allsunday.io/posts/2011-12-05-emacszhi-chi-zhong-wen-shu-ru/</link>
      <pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-12-05-emacszhi-chi-zhong-wen-shu-ru/</guid>
      <description>&lt;p&gt;自己手动编译Emacs24，加入了gtk3的支持。因为我是&lt;code&gt;en_US.utf8&lt;/code&gt; 的locale，
Emacs默认执行时是不支持ibus的中文输入。必须要 &lt;code&gt;LC_CTYPE=zh_CN.utf8 emacs&lt;/code&gt;
这样指定locale为zh_CN才能支持中文输入。因为每次都要输入很麻烦，而且从
菜单启动的时候没办法指定。&lt;/p&gt;
&lt;p&gt;所以找了个最简单的方法：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Move wicd&#39;s icon to gnome-shell&#39;s status bar(top bar)</title>
      <link>http://blog.allsunday.io/posts/2011-12-05-move-wicds-icon-to-gnome-shells-status-bar-top-bar/</link>
      <pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-12-05-move-wicds-icon-to-gnome-shells-status-bar-top-bar/</guid>
      <description>After I saw a extension of gnome-shell to move pidgin&amp;rsquo;s icon to the status bar, I tried to roll my own extension following the extension&amp;rsquo;s source to move the wicd&amp;rsquo;s icon to the status bar too. I followed the post Adding pidgin icon to gnome-shell status tray. All I did is just to change the name of pidgin to wicd. After reboot my gnome-shell, it worked. Wicd&amp;rsquo;s icon appeared in</description>
    </item>
    
    <item>
      <title>Python urllib2的timeout的问题</title>
      <link>http://blog.allsunday.io/posts/2011-11-29-python-set-urllib2-timeout/</link>
      <pubDate>Tue, 29 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-29-python-set-urllib2-timeout/</guid>
      <description>** 参考How Python’s urllib2 Bit Me ** python的 urllib2 包默认并不设置 timeout 的时间，它把这个问题向下传递到 httplib 包，而 httplib 包自己也不处理这个问题， 它也向下</description>
    </item>
    
    <item>
      <title>debian6上nginx与uwsgi安装</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-debian6shang-nginxyu-uwsgian-zhuang/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-debian6shang-nginxyu-uwsgian-zhuang/</guid>
      <description>见linode的文档</description>
    </item>
    
    <item>
      <title>debian安装mysql-python模块</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-debianan-zhuang-mysql-pythonmo-kuai/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-debianan-zhuang-mysql-pythonmo-kuai/</guid>
      <description>直接 pip install mysql-python 提示 mysql-config 未找到，google了下，发现要先安装libmysql++-dev。 apt-get install limysql++-dev pip install mysql-python 安装完成，可以在python中用mysql了</description>
    </item>
    
    <item>
      <title>Emacs find file in git repository</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-emacs-find-file-in-git-repository/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-emacs-find-file-in-git-repository/</guid>
      <description>{% gist 1391392 %}</description>
    </item>
    
    <item>
      <title>Emacs笔记</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-emacsbi-ji/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-emacsbi-ji/</guid>
      <description>&lt;h2 id=&#34;buffer操作&#34;&gt;Buffer操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在新buffer打开文件 C-x C-f&lt;/li&gt;
&lt;li&gt;在当前buffer打开文件 C-x C-v&lt;/li&gt;
&lt;li&gt;向当前buffer追加文件 C-x i&lt;/li&gt;
&lt;li&gt;另存为 C-x C-w&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Github整合Pull Request和Issue</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-githubzheng-he-pull-requesthe-issue/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-githubzheng-he-pull-requesthe-issue/</guid>
      <description>我们把Github的Issue功能用来做计划，每次一个新功能完成，都会提交一个Pull Request。 提交一个Pull Request会自动新</description>
    </item>
    
    <item>
      <title>Linux下用proxychains给所有的程序用上代理</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-linuxxia-yong-proxychainsgei-suo-you-de-cheng-xu-yong-shang-dai-li/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-linuxxia-yong-proxychainsgei-suo-you-de-cheng-xu-yong-shang-dai-li/</guid>
      <description>Archlinux 下，只需要yaourt -S proxychains就能安装完毕，然后编辑/etc/proxychains.conf，修改proxy的地址为12</description>
    </item>
    
    <item>
      <title>uwsgi与nginx的多站点配置</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-uwsgiyu-nginxde-duo-zhan-dian-pei-zhi/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-uwsgiyu-nginxde-duo-zhan-dian-pei-zhi/</guid>
      <description>From uWSGI Examples We have two virtualenv, DJANGOVENVS/pinax1 and DJANGOVENVS/pinax2. Each virtualenv contains a pinax site in the directory &amp;lsquo;pinaxsite&amp;rsquo; and a script (called pinax.py) in every pinaxsite/deploy directory (that is a copy of deploy/pinax.wsgi) Now configure nginx server { listen 8080; server_name sirius.local; location / { include uwsgi_params; uwsgi_pass 127.0.0.1:3031; uwsgi_param UWSGI_PYHOME /Users/roberto/DJANGOVENVS/pinax1; uwsgi_param UWSGI_SCRIPT deploy.pinax; uwsgi_param UWSGI_CHDIR /Users/roberto/DJANGOVENVS/pinax1/pinaxsite; } } server { listen 8080; server_name localhost; location /</description>
    </item>
    
    <item>
      <title>win下设置emacs的默认编码</title>
      <link>http://blog.allsunday.io/posts/2011-11-24-winxia-she-zhi-emacsde-mo-ren-bian-ma/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-11-24-winxia-she-zhi-emacsde-mo-ren-bian-ma/</guid>
      <description>Emacs只能指定新建buffer的默认编码，和读取文件时候的编码寻找顺序。文件写入编码 Emacs会根据文件内容来猜测，并保持原有的编码不变</description>
    </item>
    
    <item>
      <title>css中position属性和margin设置</title>
      <link>http://blog.allsunday.io/posts/2011-10-23-setting-position-and-margin-in-css/</link>
      <pubDate>Sun, 23 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-10-23-setting-position-and-margin-in-css/</guid>
      <description>position有static(默认),relative,fixed,absolute几个属性，他们作用分别如下： static是默认属性，元</description>
    </item>
    
    <item>
      <title>css和jquery里面的height属性</title>
      <link>http://blog.allsunday.io/posts/2011-10-23-height-in-css-and-jquery/</link>
      <pubDate>Sun, 23 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.allsunday.io/posts/2011-10-23-height-in-css-and-jquery/</guid>
      <description>获取浏览器窗口的可见高度用 document.body.clientHeight 获取当前网页的高度用 document.height height %100是相对于父元素的高度来设置的。 jquery获取height属性的几个方法 $(&#39;&#39;).height() 只获取</description>
    </item>
    
  </channel>
</rss>