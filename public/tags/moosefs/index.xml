<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>moosefs on allsunday</title><link>http://blog.allsunday.io/tags/moosefs/</link><description>Recent content in moosefs on allsunday</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 27 May 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.allsunday.io/tags/moosefs/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 磁盘性能测试工具</title><link>http://blog.allsunday.io/post/2014-05-27-linux%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate><guid>http://blog.allsunday.io/post/2014-05-27-linux%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid><description>公司的 MySQL io性能遇到了瓶颈， MySQL 层面的优化基本已经都做完了， 而应用层面的优化又会过于繁琐与复杂。 于是我们最初的结论是最简单的方法就是上 SSD。后来询问了豆瓣flex关于SSD的经验， 发现SSD还不是那么成熟，出现问题的情况还是比较多，而我们又没有这方面的经验， 所以就把SSD这个方案给搁置了。
豆瓣flex给出豆瓣这方面的经验是：用15000转的硬盘做RAID 10。使用RAID卡的 缓存以后，性能相对于直接使用硬盘有极大的提升。而且RAID的技术已经非常的成熟，这个方案看起来是比较靠谱的。
我们的机器是 R710，默认自带的RAID卡性能非常弱，只能做 RAID 0或 RAID 1。flex推荐的是 H700，因为 R710 的背板线与 H700不兼容，所以连线也要一起换掉。
做完RAID以后，第一件事情就是要测试下磁盘的性能。常用的工具有 hdparm 和 dd，但是这两个测试的都是顺序读写，而实际的使用情景很大一部分都是随机读写。flex推荐了一个工具 fio，一个专门用来测试硬盘io的工具。
有一篇文章很好的介绍了它的使用方法： http://www.linux.com/learn/tutorials/442451-inspecting-disk-io-performance-with-fio/
我只用了它最基本的测试随机读的功能。在RAID1 10上测试的结果是平均读取的速度到了 80M/s。而我在现有的服务器上面（未做RAID，7500转硬盘），这个数值只有 1M/s 左右。没做15000转硬盘的性能测试，所以不是很清楚 RAID 10 得到的性能提升有多少。</description></item><item><title>moosefs 新部署 chunkserver</title><link>http://blog.allsunday.io/post/2014-05-12-moosefs%E6%96%B0%E9%83%A8%E7%BD%B2chunkserver/</link><pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate><guid>http://blog.allsunday.io/post/2014-05-12-moosefs%E6%96%B0%E9%83%A8%E7%BD%B2chunkserver/</guid><description>在 /etc/apt/source.lst 里面加入
deb http://apt-repo:3143/ / 运行一下命令来安装 moosefs 相关的包
apt-get update apt-get install moosefs-chunkserver moosefs-client moosefs-master 修改配置文件
cd /etc/mfs cp mfschunkserver.cfg.dist mfschunkserver.cfg 因为我在 DNS 里面配置了 mfsmaster 指向 master 的 ip ，所以我们 不需要对 mfschunkserver 的配置进行修改。
cd /etc/mfs cp mfshdd.cfg.dist mfshdd.cfg vim mfshdd.cfg 在 mfshdd.cfg 里面加入存放数据的目录。
增加启动脚本
wget https://gist.githubusercontent.com/gfreezy/f1dc2ee1620b2cbe970f/raw/65dce19ebd768571ce0f258916743ca4999e11fb/mfschunkserver -O /etc/init.d/mfschunkserver chmod +x /etc/init.d/mfschunkserver update-rc.d mfschunkserver defaults 启动 mfschunkserver</description></item><item><title>制作 Moosefs debian 安装包</title><link>http://blog.allsunday.io/post/2013-07-17-%E5%88%B6%E4%BD%9Cmoosefs-debian%E5%AE%89%E8%A3%85%E5%8C%85/</link><pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate><guid>http://blog.allsunday.io/post/2013-07-17-%E5%88%B6%E4%BD%9Cmoosefs-debian%E5%AE%89%E8%A3%85%E5%8C%85/</guid><description>Moosefs一共可以分为 master, chunkserver, client 三个应用程序，需要分别制作3个debian安装包。
准备工作 确保 fuse 已经安装
安装 checkinstall
apt-get install checkinstall 从 moosefs 下载源代码 mfs-1.6.27.tar.gz。
创建用于编译的mfs帐号和用户组
groupadd mfs useradd -g mfs mfs 解压源代码，并切换目录
tar xvzf mfs-1.6.27.tar.gz cd mfs-1.6.27 制作 Master 安装包 配置
./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var/lib --with-default-user=mfs --with-default-group=mfs --disable-mfschunkserver --disable-mfsmount 编译, -j4 是为了让 make 充分利用多核CPU</description></item></channel></rss>